import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'
import { EventRequest } from '../../api/common/request/event.request';
import { raw_data } from '../../assets/data/raw_data';
import { add, differenceInDays, endOfMonth, getDate, getDay, getMonth, getYear, startOfMonth } from 'date-fns';
import { EventState } from '../interfaces/event_state.interface';
import { AppGlobalState } from '../interfaces/app_global_state.interface';
import { EventResponse } from '../../api/common/response/event.response';
import EventService from '../../api/event/event.api';

// Kh·ªüi t·∫°o gi√° tr·ªã m·ªôt gi√° tr·ªã c·ªßa Slice trong Redux
const initialState: EventState = {
  upcomingEvents: [],
  totalUpcomingEvents: [],
  isLoading: false
}

export const getTotalEventAPI = createAsyncThunk(
  'event/getTotalEventAPI',
  async (data: EventRequest) => {
    // call api
    const request = await EventService.getUpcomingEvent(data);
    return {
      totalUpcomingEvents: request,
      date: data.date
    } as any;
  }
)


export const eventSlice = createSlice({
  name: 'event',
  initialState,
  reducers: {
    // Ph∆∞∆°ng: L∆∞u √Ω lu√¥n l√† ·ªü ƒë√¢y c·∫ßn c·∫∑p ngo·∫∑c nh·ªçn cho function trong reducer cho d√π code b√™n trong ch·ªâ c√≥ 1 d√≤ng, ƒë√¢y l√† rule c·ªßa Redux
    // Ph∆∞∆°ng: https:// Ph∆∞∆°ng:redux-toolkit.js.org/usage/immer-reducers#mutating-and-returning-state
    updateLoadingState: (state: EventState, action: PayloadAction<any>) => {
      const isLoading = action.payload
      state.isLoading = isLoading
    },
    updateUpcomingEvent: (state: EventState, action: PayloadAction<any>) => {
      const date = getDate(action.payload.date)
      console.log("üöÄ ~ date:", date)
      state.upcomingEvents = state.totalUpcomingEvents.length === 0 ? [] : state.totalUpcomingEvents[date - 1]
    }
  },
  extraReducers: (builder) => {
    builder.addCase(getTotalEventAPI.fulfilled, (state: EventState, action: PayloadAction<any>) => {
      const { totalUpcomingEvents, date } = action.payload
      console.log("üöÄ ~ builder.addCase ~ upcomingEvents:", totalUpcomingEvents)
      state.totalUpcomingEvents = totalUpcomingEvents

      state.upcomingEvents = state.totalUpcomingEvents[getDate(date) - 1]
    })
  }
})
// Ph∆∞∆°ng: 
export const {
  updateLoadingState,
  updateUpcomingEvent
} = eventSlice.actions

// Ph∆∞∆°ng: Selectors: m·ª•c ƒë√≠ch l√† d√†nh cho c√°c components b√™n d∆∞·ªõi g·ªçi b·∫±ng useSelector() t·ªõi n√≥
// Ph∆∞∆°ng: ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ trong redux store ra s·ª≠ d·ª•ng

export const selectUpcomingEvents = (state: AppGlobalState) => {
  return state.event.upcomingEvents
}

export const selectTotalUpcomingEvents = (state: AppGlobalState) => {
  return state.event.totalUpcomingEvents
}

export const selectLoadingEvents = (state: AppGlobalState) => {
  return state.event.isLoading
}

// Ph∆∞∆°ng: Export default c√°i eventReducer c·ªßa ch√∫ng ta ƒë·ªÉ combineReducers trong store
export const eventReducer = eventSlice.reducer